#!/usr/bin/env python

"""
Copyright 2013 YouView TV Ltd.
License: LGPL v2.1 or (at your option) any later version (see
https://github.com/drothlis/stb-tester/blob/master/LICENSE for details).
"""

import argparse
import sys

import cv2

import stbt


def error(s):
    sys.stderr.write("stbt templatematch: error: %s\n" % s)
    sys.exit(1)


parser = argparse.ArgumentParser()
parser.prog = "stbt templatematch"
parser.description = """Run stbt's templatematch algorithm against a single
    frame (which you can capture using `stbt screenshot`)."""
parser.add_argument(
    "-v", "--verbose", action="store_true",
    help="Dump image processing debug images to ./stbt-debug directory")
parser.add_argument(
    "source_file", help="""The screenshot to compare against (you can capture it
        using 'stbt screenshot')""")
parser.add_argument(
    "template_file", help="The image to search for")
parser.add_argument(
    "match_parameters", nargs="*",
    help="""Parameters for the image processing algorithm. See
        'MatchParameters' in the stbt API documentation. For example:
        'confirm_threshold=0.20')""")
args = parser.parse_args(sys.argv[1:])

mp = stbt.MatchParameters()
try:
    for p in args.match_parameters:
        name, value = p.split("=")
        if name == "match_method":
            mp.match_method = value
        elif name == "match_threshold":
            mp.match_threshold = float(value)
        elif name == "confirm_method":
            mp.confirm_method = value
        elif name == "confirm_threshold":
            mp.confirm_threshold = float(value)
        elif name == "erode_passes":
            mp.erode_passes = int(value)
        else:
            raise Exception("Unknown match_parameter argument '%s'" % p)
except Exception:  # pylint: disable=W0703
    error("Invalid argument '%s'" % p)

source_image = cv2.imread(args.source_file)
if source_image is None:
    error("Invalid image '%s'" % args.source_file)
template_image = cv2.imread(args.template_file)
if template_image is None:
    error("Invalid image '%s'" % args.template_file)

if args.verbose:
    stbt._debug_level = 2  # pylint: disable=W0212

matched, position, first_pass = stbt._match(  # pylint: disable=W0212
    source_image, template_image, mp, args.template_file)

print "%s: %s" % (
    "Match found" if matched else "No match found. Closest match",
    str(stbt.MatchResult(
        timestamp=0, match=matched, position=position,
        first_pass_result=first_pass, frame=source_image,
        image=args.template_file)))
sys.exit(0 if matched else 1)
