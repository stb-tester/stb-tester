#!/usr/bin/env bash
#                                                    -*- sh-basic-offset: 2 -*-

# Copyright 2013 YouView TV Ltd.
# License: LGPL v2.1 or (at your option) any later version (see
# https://github.com/drothlis/stb-tester/blob/master/LICENSE for details).

#/ Usage:
#/   run [options] test.py [test.py ...]
#/   run [options] test.py arg [arg ...] -- test.py arg [arg ...] [-- ...]
#/
#/ Options:
#/   -1    Run once. The default behaviour is to run the test
#/         repeatedly as long as it passes.
#/   -k    Continue running after "uninteresting" failures.
#/   -kk   Continue running after any failure (except those
#/         that would prevent any further test from passing).
#/
#/   -d    Enable "stbt-debug" dump of intermediate images.
#/   -v    Verbose. Print stbt standard output.
#/   -vv   Extra verbose. Print stbt stdandard error output.
#/
#/   -t <tag>  Tag to add to test run directory names (useful
#/         to differentiate directories when you intend to
#/         merge test results from multiple machines).

usage() { grep '^#/' "$0" | cut -c4-; }
die() { echo "$(basename "$0"): error: $*" >&2; exit 1; }

main() {
  runner=$(dirname "$(realpath "$0")")
  export PYTHONUNBUFFERED=x

  keep_going=0
  run_once=false
  stop=false
  tag=
  v=-v
  verbose=0
  while getopts ":1dhkt:v" option; do
    case $option in
      1) run_once=true;;
      d) v=-vv;;
      h) usage; exit 0;;
      k) keep_going=$((keep_going + 1));;
      t) tag=-$OPTARG;;
      v) verbose=$((verbose + 1));;
      *) die "Invalid option '-$OPTARG'. Use '-h' for help.";;
    esac
  done
  shift $((OPTIND - 1))
  [[ $# -gt 0 ]] || { usage >&2; exit 1; }

  exec 3>/dev/null 4>/dev/null
  [ $verbose -gt 0 ] && exec 3>&1
  [ $verbose -gt 1 ] && exec 4>&1

  while true; do
    while IFS=$'\t' read -a test; do
      run "${test[@]}"
      should_i_continue || break 2
    done < <(parse_test_args "$@")
    $run_once && break
  done
}

run() {
  local test testpath rundir

  test="$1" && shift &&
  testpath=$(realpath "$test") &&
  rundir=$(date +%Y-%m-%d_%H.%M.%S)"$tag" &&
  mkdir "$rundir" &&
  rm -f current"$tag" && ln -s "$rundir" current"$tag" &&
  cd "$rundir" &&
  mkfifo rawout rawerr ||
  die "Failed to set up test-run directory '$rundir'."

  [ -n "$tag" ] && echo "Tag	${tag#-}" > extra-columns

  ( cd "$(dirname "$testpath")" &&
    git describe --always --dirty
  ) > git-commit ||
  die "Failed to determine the test script's git revision."

  ( cd "$(dirname "$testpath")" &&
    gitdir=$(dirname "$(realpath "$(git rev-parse --git-dir)")") &&
    echo "${testpath#$gitdir/}"
  ) > test-name ||
  die "Failed to determine the test script's path relative to its git repo."

  printf "%s\n" "$@" > test-args

  user_command pre_run start

  [ $verbose -gt 0 ] && printf "\n$test $*...\n" || printf "$test $*... "
  stbt run $v --save-video "video.webm" "$testpath" "$@" >rawout 2>rawerr &
  stbtpid=$!
  local start_time=$(date +%s)
  ts '[%Y-%m-%d %H:%M:%.S %z] ' < rawout | tee stdout.log >&3 &
  ts '[%Y-%m-%d %H:%M:%.S %z] ' < rawerr | tee stderr.log >&4 &

  while true; do
    interrupted=false
    wait $stbtpid
    exit_status=$?
    $interrupted || break
  done

  [[ $exit_status -eq 0 ]] && echo OK || echo FAILED

  # Data that must be collected ASAP
  echo $(( $(date +%s) - $start_time )) > duration
  which sensors &>/dev/null && sensors > sensors.log
  [[ $exit_status -ne 0 ]] && stbt screenshot screenshot-clean.png &>/dev/null
  echo $exit_status > exit-status
  user_command post_run stop

  rm rawout rawerr
  stbt --version > stbt-version.log
  grep -q "FAIL: .*: MatchTimeout" stdout.log && template
  [ -f core* ] && backtrace core*
  grep -q "FAIL: .*: NoVideo" stdout.log && {
    check_capture_hardware || stop=true; }
  "$runner"/report --classify-only . >/dev/null

  if [[ $exit_status -ne 0 ]]; then
    user_command recover || stop=true
  fi

  "$runner"/report --html-only . >/dev/null

  cd ..
  rm -f latest"$tag"; ln -s "$rundir" latest"$tag"
}

trap on_kill1 sigint sigterm
on_kill1() {
  printf "\nReceived interrupt; waiting for current test to complete.\n" >&2
  interrupted=true stop=true
  trap on_kill2 sigint sigterm
}
on_kill2() {
  echo "Received interrupt; exiting." >&2
  interrupted=true stop=true
  killtree $stbtpid
}

should_i_continue() {
  $stop && return 1;
  [[ $exit_status -eq 0 ]] ||
  # "Uninteresting" failures due to the test infrastructure
  [[ $keep_going -gt 0 && $exit_status -gt 1 ]] ||
  # Failures due to the system under test
  [[ $keep_going -gt 1 ]]
}

template() {
  local template=$(
    sed -n 's,^.*stbt-run: Searching for \(.*\.png\)$,\1,p' stderr.log |
    tail -1)
  [ -f "$template" ] && cp "$template" template.png
}

backtrace() {
  local gdbcommand corefile=$1
  gdbcommand=$(mktemp -t report.XXX) || die "Failed to create temp file"
  echo "thread apply all bt" > $gdbcommand
  gdb $(which python) $corefile -batch -x $gdbcommand &> backtrace.log
  rm -f $gdbcommand
}

user_command() {
  local c=$(stbt config runner.$1 2>/dev/null)
  [[ -z "$c" ]] && return
  "$c" $2 </dev/null
}

check_capture_hardware() {
  case "$(stbt config global.source_pipeline | awk '{print $1}')" in
    v4l2src)
      if grep -q "Cannot identify device '/dev/v" failure-reason; then
        echo "v4l2 device not found; exiting."
        return 1
      fi
      ;;

    decklinksrc)
      ( echo "$(basename "$0"): Checking Blackmagic video-capture device"
        GST_DEBUG=decklinksrc:4 GST_DEBUG_NO_COLOR=1 \
        stbt run --sink-pipeline='fakesink sync=false' \
          <(echo "import time; time.sleep(1)") 2>&1
      ) | ts '[%Y-%m-%d %H:%M:%.S %z] ' > decklinksrc.log

      if grep -q "enable video input failed" decklinksrc.log; then
        local subdevice=$(
          stbt config global.source_pipeline |
          grep -o subdevice=. | awk -F= '{print $2}')
        local users=$(
          lsof -F Lnc /dev/blackmagic${subdevice:-0} 2>/dev/null |
          # Example `lsof` output:
          # p70752
          # cgst-launch-0.10
          # Lstb-tester
          # n/dev/blackmagic0
          awk '/^p/ { printf "\n" }
                    { sub(/^./, ""); printf $0 " " }')
        echo "Blackmagic card in use: $users" > failure-reason
        cp failure-reason failure-reason.manual
        echo "Blackmagic card in use; exiting."
        return 1

      # Even if the card has no video connected to its input you see
      # "VideoInputFrameArrived: Frame received - No input signal detected"
      elif ! grep -q VideoInputFrameArrived decklinksrc.log; then
        echo "Blackmagic card froze" > failure-reason
        cp failure-reason failure-reason.manual
        echo "Blackmagic card froze; exiting."
        return 1
      fi
      ;;
  esac
}

# Input:
#   test1.py arg1 arg2 -- test2.py arg -- test3.py
# Output (suitable as input to `IFS=$'\t' read -a`):
#   test1.py\targ1\targ2
#   test2.py\targ
#   test3.py
parse_test_args() {
  if [[ "$*" =~ -- ]]; then
    [[ "$1" == -- ]] && shift
    while [[ $# -gt 0 ]]; do
      printf "%s" "$1"; shift
      while [[ $# -gt 0 && "$1" != -- ]]; do printf "\t%s" "$1"; shift; done
      printf "\n"
      [[ "$1" == -- ]] && shift
    done
  else  # No "--": Each command-line argument is a test script.
    printf "%s\n" "$@"
  fi
}

# http://stackoverflow.com/questions/392022/best-way-to-kill-all-child-processes
killtree() {
  local parent=$1 child
  for child in $(ps -o ppid= -o pid= | awk "\$1==$parent {print \$2}"); do
    killtree $child
  done
  kill $parent
}

# Portable implementation of GNU "readlink -f" to support BSD/OSX.
realpath() {
  python -c 'import os, sys; print os.path.realpath(sys.argv[1])' "$1"
}

main "$@"
