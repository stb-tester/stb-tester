#!/usr/bin/python

"""Fake irNetBox server for unit tests.

Just ACKs all requests. See ../stbt/irnetbox.py for information on the irNetBox.
"""
from __future__ import unicode_literals
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from builtins import (ascii, chr, filter, hex, input, map, next, oct, open, pow,  # pylint:disable=redefined-builtin,unused-import,wildcard-import,wrong-import-order
                      range, round, super, zip)

import binascii
import socket
import socketserver
import struct
import sys
import time

from _stbt.irnetbox import MessageTypes


class FakeIRNetBox(socketserver.BaseRequestHandler):
    def handle(self):
        x = None
        while x != b"#":
            try:
                x = self.recv(1)
            except socket.error as e:
                if e.errno == socket.errno.ECONNRESET:
                    print("fake-irnetbox: Client closed connection")
                    return
                raise
        _ = struct.unpack(">H", self.recv(2))
        message_type = ord(self.recv(1))
        print("fake-irnetbox: Received message %s (0x%02x)" % (
            name(message_type), message_type))

        if message_type in [
            MessageTypes.POWER_ON,
            MessageTypes.POWER_OFF,
            MessageTypes.CPLD_INSTRUCTION,
        ]:
            self.send(message_type)

        if message_type == MessageTypes.DEVICE_VERSION:
            self.send(
                message_type,
                # Product ID 8 == irNetBox mk-III
                struct.pack("<BB8H", 18, 1, 0, 0, 0, 0, 8, 0, 0, 0))

        if message_type == MessageTypes.OUTPUT_IR_ASYNC:
            sequence_number, = struct.unpack(">H", self.recv(2))
            print("fake-irnetbox: ...with sequence number %d" % sequence_number)
            if self.server.response == "error":
                self.send(
                    MessageTypes.ERROR,
                    struct.pack("B", 40))  # error code = not enough memory
            elif self.server.response == "noreply":
                pass
            else:
                ack = self.server.response in ["ack", "wait"]
                self.send(
                    MessageTypes.OUTPUT_IR_ASYNC,
                    # Sequence number in the ACK message is defined as
                    # big-endian in sections 5.1 and 6.1.2 of
                    # http://www.redrat.co.uk/products/IRNetBox_Comms-V3.0.pdf
                    # but due to a known bug it is little-endian.
                    struct.pack(
                        "<HBB", sequence_number,
                        0 if ack else 49,  # error code = busy
                        1 if ack else 0))
                print("fake-irnetbox: ...(%s)" % ("ack" if ack else "nack"))
                if ack:
                    time.sleep(2 if self.server.response == "wait" else 0.2)
                    self.send(
                        MessageTypes.IR_ASYNC_COMPLETE,
                        struct.pack(">HBB", sequence_number, 0, 0))

        self.handle()

    def recv(self, bufsize):
        data = self.request.recv(bufsize)
        if data:
            print("fake-irnetbox: recv %s" % binascii.hexlify(data))
        else:  # Apparently SocketServer gives me a non-blocking socket
            time.sleep(0.1)
        return data

    def send(self, message_type, data=b""):
        m = struct.pack(
            ">HB%ds" % len(data),
            len(data),
            message_type,
            data)
        self.request.sendall(m)
        print("fake-irnetbox: Sent response %s: %s" % (
            name(message_type), binascii.hexlify(m)))


def name(message_type):
    return {
        MessageTypes.ERROR: "ERROR",
        MessageTypes.POWER_ON: "POWER_ON",
        MessageTypes.POWER_OFF: "POWER_OFF",
        MessageTypes.CPLD_INSTRUCTION: "CPLD_INSTRUCTION",
        MessageTypes.DEVICE_VERSION: "DEVICE_VERSION",
        MessageTypes.SET_MEMORY: "SET_MEMORY",
        MessageTypes.DOWNLOAD_SIGNAL: "DOWNLOAD_SIGNAL",
        MessageTypes.OUTPUT_IR_SIGNAL: "OUTPUT_IR_SIGNAL",
        MessageTypes.OUTPUT_IR_ASYNC: "OUTPUT_IR_ASYNC",
        MessageTypes.IR_ASYNC_COMPLETE: "IR_ASYNC_COMPLETE",
    }.get(message_type, message_type)


class Server(socketserver.ThreadingTCPServer):
    daemon_threads = True

    def __init__(self, address, handler, response):
        socketserver.ThreadingTCPServer.__init__(self, address, handler)
        self.response = response


if __name__ == "__main__":
    server = Server(
        ("localhost", 0),
        FakeIRNetBox,
        sys.argv[1] if len(sys.argv) > 1 else "ack")
    print("PORT=%s" % server.socket.getsockname()[1])
    server.serve_forever()
