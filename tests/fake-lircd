#!/usr/bin/python

"""Fake LIRC daemon for unit tests.

* Returns error for button names that contain "error".
* Doesn't return anything for button names that contain "timeout".
* ACKs all other requests.
* First broadcasts a SIGHUP message if the button name contains "sighup".
* First broadcasts "infrared signal received" message if the button name
  contains "broadcast".

See http://www.lirc.org/html/technical.html#applications
"""
from __future__ import unicode_literals
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from builtins import (ascii, chr, filter, hex, input, map, next, oct, open, pow,  # pylint:disable=redefined-builtin,unused-import,wildcard-import,wrong-import-order
                      range, round, super, zip)

import os
import re
import socket
import tempfile
from contextlib import contextmanager


def main():
    f = tempfile.mktemp()
    with deleting(f):
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        s.bind(f)
        s.listen(5)
        print("SOCKET=" + f)
        while True:
            client, _ = s.accept()
            for line in client.makefile("rb"):
                line = line.strip()
                print("fake-lircd: Received: %s" % line)
                try:
                    r = response(line)
                    if r:
                        print("fake-lircd: Sending: %s" % r)
                        client.sendall(r)
                except socket.error as e:
                    if e.errno == socket.errno.EPIPE:
                        pass
                    else:
                        raise


def response(req):
    s = b""
    if re.search(b"sighup", req):
        s += b"BEGIN\nSIGHUP\nEND\n"
    if re.search(b"broadcast", req):
        s += b"000f00b 01 OK My-IR-remote\n"
    if req.startswith(b"SEND_"):
        if re.search(b"error", req):
            s += b"BEGIN\n%s\nERROR\nDATA\n1\nfake-lircd error\nEND\n" % req
        elif re.search(b"timeout", req):
            pass
        else:
            s += b"BEGIN\n%s\nSUCCESS\nEND\n" % req
    return s


@contextmanager
def deleting(f):
    try:
        yield
    finally:
        os.remove(f)


if __name__ == "__main__":
    main()
