#!/usr/bin/env bash
#                                                    -*- sh-basic-offset: 2 -*-

# Copyright 2013 YouView TV Ltd.
# License: LGPL v2.1 or (at your option) any later version (see
# https://github.com/drothlis/stb-tester/blob/master/LICENSE for details).

#/ Usage: stbt batch report <testrun directory> [<testrun directory>...]
#/
#/ Classifies the results previously generated by 'stbt batch run'
#/ according to the reason for failure.
#/ Generates a detailed report in <testrun directory>/index.html
#/ and a summary report in <testrun directory>/../index.html.

usage() { grep '^#/' "$0" | cut -c4-; }

main() {
  runner=$(dirname "$(realpath "$0")")

  do_classify=true
  do_html=true
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help) usage; exit 0;;
      --classify-only) do_html=false; shift;;
      --html-only) do_classify=false; shift;;
      *) break;;
    esac
  done
  [[ $# -gt 0 ]] || { usage >&2; exit 1; }

  for rundir in "$@"; do
    (
      [[ "$rundir" =~ index.html$ ]] && return 0  # Summary report only
      cd "$rundir" || die "Invalid directory '$rundir'"

      if $do_classify; then
        [ -r exit-status ] || {
          echo "$rundir: No exit status (test still in progress); skipping"
          return 0
        }
        classify > failure-reason
        LC_ALL=C sort --merge stdout.log stderr.log > combined.log
        user_command classify
        echo "$rundir: $(cat failure-reason)"
      fi

      if $do_html; then
        [ -r test-name ] || {
          echo "$rundir: Not a test result directory; skipping"
          return 0
        }
        python "$runner"/report.py . > index.html.$$ &&
        mv index.html.$$ index.html
      fi
    ) || return
  done

  # Generate summary report
  if $do_html; then
    for resultsdir in $(
      for rundir in "$@"; do dirname $(abspath $rundir); done | sort | uniq)
    do
      (
        cd "$resultsdir" || die "Invalid directory '$resultsdir'"
        python "$runner"/report.py index.html > index.html.$$ &&
        mv index.html.$$ index.html
      )
    done
  fi
}

classify() {
  local status=$(cat exit-status)
  local testname=$(cat test-name)

  if [ $status -eq 0 ]; then
    echo success

  elif [ $status -gt 128 ]; then
    echo killed "($(signalname $((status - 128))))"

  elif local exception=$(
      sed -n "s/^.*FAIL: .*$(basename "$testname"): //p" stdout.log);
    [[ -n "$exception" ]];
  then
    echo "$exception"

  else
    echo unknown
  fi
}

signalname() {
  local num=$1
  ( set -o pipefail
    kill -l | grep -Eo "\b$num\) SIG\S+" | awk '{print tolower($2)}' ||
      echo $num
  )
}

user_command() {
  local c=$(stbt config batch.$1 2>/dev/null)
  [[ -z "$c" ]] && return
  "$c"
}

die() { echo "$(basename "$0"): error: $*" >&2; exit 1; }

# Portable implementation of GNU "readlink -f" to support BSD/OSX.
realpath() {
  python -c 'import os, sys; print os.path.realpath(sys.argv[1])' "$1"
}

abspath() {
  python -c 'import os, sys; print os.path.abspath(sys.argv[1])' "$1"
}

main "$@"
